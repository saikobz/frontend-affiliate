import React, { useEffect, useState } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import { KEYCLOAK_BASE, REDIRECT_URI } from '../utils/config';

const Navbar = () => {
    const [username, setUsername] = useState(null);
    const location = useLocation();
    const navigate = useNavigate(); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isTokenExpired = (token) => {
        try {
            const decoded = jwtDecode(token);
            const exp = decoded.exp * 1000; // ‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á token
            return Date.now() > exp; // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß
        } catch (error) {
            console.error("Error decoding token:", error);
            return true; // ‡∏ñ‡πâ‡∏≤ decode ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token
    const refreshToken = () => {
        const refreshToken = localStorage.getItem("refresh_token");
        if (!refreshToken) {
            alert("Refresh token not found. Please login again.");
            navigate("/login");
            return;
        }

        const data = new URLSearchParams();
        data.append("grant_type", "refresh_token");
        data.append("refresh_token", refreshToken);
        data.append("client_id", "affiliator-client");
        data.append("redirect_uri", REDIRECT_URI);

        fetch(`${KEYCLOAK_BASE}/protocol/openid-connect/token`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: data,
        })
        .then((res) => res.json())
        .then((token) => {
            if (token.access_token) {
                localStorage.setItem("access_token", token.access_token);
                localStorage.setItem("refresh_token", token.refresh_token); // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ refresh token ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö
                navigate("/packages"); // ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            } else {
                console.error("Failed to refresh token:", token);
                navigate("/login");
            }
        })
        .catch((err) => {
            console.error("Error refreshing token:", err);
            navigate("/login");
        });
    };

    useEffect(() => {
        const token = localStorage.getItem("access_token");

        if (token && isTokenExpired(token)) {
            // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            refreshToken();
        } else if (token) {
            const decoded = jwtDecode(token);
            const username = decoded.preferred_username || decoded.name || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ";
            setUsername(username); // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        } else {
            setUsername(null); // ‡πÑ‡∏°‡πà‡∏°‡∏µ token, ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        }
    }, [location]); // ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà path ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ token ‡πÉ‡∏´‡∏°‡πà

    const handleLogout = () => {
        localStorage.removeItem("access_token");
        localStorage.removeItem("refresh_token");
        setUsername(null);
        navigate("/login");
    };

    const loginUrl = `${KEYCLOAK_BASE}/protocol/openid-connect/auth?client_id=affiliator-client&response_type=code&scope=openid&redirect_uri=${REDIRECT_URI}`;

    return (
        <nav className="navbar navbar-expand-lg navbar-dark bg-dark px-4">
            <Link className="navbar-brand" to="/">üåê Capibara</Link>
            <div className="collapse navbar-collapse">
                <ul className="navbar-nav me-auto">
                    <li className="nav-item">
                        <Link className="nav-link" to="/">‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</Link>
                    </li>
                    <li className="nav-item">
                        <Link className="nav-link" to="/add-website">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</Link>
                    </li>
                    <li className="nav-item">
                        <Link className="nav-link" to="/websites">üìã ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</Link>
                    </li>
                    <li className="nav-item">
                        <Link className="nav-link" to="/dashboard">üìä Dashboard</Link>
                    </li>
                    {!username && (
                        <li className="nav-item">
                            <Link to="/register" className="nav-link">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</Link>
                        </li>
                    )}
                </ul>
                <div className="d-flex align-items-center gap-3">
                    {username && (
                        <div className="text-white d-flex align-items-center">
                            <img src={`https://ui-avatars.com/api/?name=${username}`} alt="avatar" width="32" height="32" className="rounded-circle me-2" />
                            <span>{username}</span>
                        </div>
                    )}
                    {username ? (
                        <button className="btn btn-outline-light" onClick={handleLogout}>üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
                    ) : (
                        <a className="btn btn-outline-light" href={loginUrl}>üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</a>
                    )}
                </div>
            </div>
        </nav>
    );
};

export default Navbar;